// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet/pki.proto

package wallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PublicKey struct {
	Usage   string `protobuf:"bytes,1,opt,name=usage" json:"usage,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	RawData []byte `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *PublicKey) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *PublicKey) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PublicKey) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type PrivateKey struct {
	Usage   string `protobuf:"bytes,1,opt,name=usage" json:"usage,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	RawData []byte `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
}

func (m *PrivateKey) Reset()                    { *m = PrivateKey{} }
func (m *PrivateKey) String() string            { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()               {}
func (*PrivateKey) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PrivateKey) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *PrivateKey) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PrivateKey) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type SignatureHeader struct {
	SignType string                     `protobuf:"bytes,1,opt,name=signType" json:"signType,omitempty"`
	Creator  string                     `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	Created  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	Nonce    []byte                     `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SignatureHeader) Reset()                    { *m = SignatureHeader{} }
func (m *SignatureHeader) String() string            { return proto.CompactTextString(m) }
func (*SignatureHeader) ProtoMessage()               {}
func (*SignatureHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SignatureHeader) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

func (m *SignatureHeader) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SignatureHeader) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *SignatureHeader) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type Signature struct {
	Header *SignatureHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Sign   []byte           `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Signature) GetHeader() *SignatureHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Signature) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type SignatureSimple struct {
	Creator string `protobuf:"bytes,1,opt,name=creator" json:"creator,omitempty"`
	Nonce   []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sign    []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *SignatureSimple) Reset()                    { *m = SignatureSimple{} }
func (m *SignatureSimple) String() string            { return proto.CompactTextString(m) }
func (*SignatureSimple) ProtoMessage()               {}
func (*SignatureSimple) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SignatureSimple) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SignatureSimple) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *SignatureSimple) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicKey)(nil), "wallet.PublicKey")
	proto.RegisterType((*PrivateKey)(nil), "wallet.PrivateKey")
	proto.RegisterType((*SignatureHeader)(nil), "wallet.SignatureHeader")
	proto.RegisterType((*Signature)(nil), "wallet.Signature")
	proto.RegisterType((*SignatureSimple)(nil), "wallet.SignatureSimple")
}

func init() { proto.RegisterFile("wallet/pki.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x4f, 0xc2, 0x30,
	0x1c, 0xc5, 0x33, 0x40, 0x94, 0x42, 0xa2, 0xa9, 0x26, 0x2e, 0xbb, 0x48, 0x76, 0xe2, 0x42, 0x1b,
	0xc1, 0x4f, 0x60, 0x3c, 0x98, 0x78, 0x70, 0x19, 0x78, 0xf1, 0xd6, 0x8d, 0xbf, 0xa5, 0x61, 0x6b,
	0x97, 0xae, 0x13, 0xf9, 0x1c, 0x7e, 0x61, 0xb3, 0x76, 0x9b, 0xe0, 0xd9, 0x5b, 0xdf, 0x7f, 0xff,
	0xbd, 0xfe, 0xde, 0x4b, 0xd1, 0xd5, 0x9e, 0x65, 0x19, 0x18, 0x5a, 0xec, 0x04, 0x29, 0xb4, 0x32,
	0x0a, 0x0f, 0xdd, 0x24, 0xb8, 0xe3, 0x4a, 0xf1, 0x0c, 0xa8, 0x9d, 0x26, 0xd5, 0x07, 0x35, 0x22,
	0x87, 0xd2, 0xb0, 0xbc, 0x70, 0x8b, 0xc1, 0x75, 0xf3, 0x6b, 0xaa, 0xf2, 0x5c, 0x49, 0x37, 0x0c,
	0x5f, 0xd1, 0x28, 0xaa, 0x92, 0x4c, 0xa4, 0x2f, 0x70, 0xc0, 0x37, 0xe8, 0xac, 0x2a, 0x19, 0x07,
	0xdf, 0x9b, 0x7a, 0xb3, 0x51, 0xec, 0x04, 0xc6, 0x68, 0x60, 0x0e, 0x05, 0xf8, 0x3d, 0x3b, 0xb4,
	0x67, 0xec, 0xa3, 0x73, 0xcd, 0xf6, 0x4f, 0xcc, 0x30, 0xbf, 0x3f, 0xf5, 0x66, 0x93, 0xb8, 0x95,
	0x61, 0x84, 0x50, 0xa4, 0xc5, 0x27, 0x33, 0xf0, 0x5f, 0x8e, 0xdf, 0x1e, 0xba, 0x5c, 0x09, 0x2e,
	0x99, 0xa9, 0x34, 0x3c, 0x03, 0xdb, 0x80, 0xc6, 0x01, 0xba, 0x28, 0x05, 0x97, 0xeb, 0xda, 0xc5,
	0x59, 0x77, 0xba, 0x76, 0x4a, 0x35, 0x30, 0xa3, 0x74, 0x73, 0x41, 0x2b, 0xf1, 0x43, 0xf3, 0x05,
	0x36, 0xf6, 0x8e, 0xf1, 0x22, 0x20, 0xae, 0x34, 0xd2, 0x96, 0x46, 0xd6, 0x6d, 0x69, 0x71, 0xbb,
	0x5a, 0x67, 0x90, 0x4a, 0xa6, 0xe0, 0x0f, 0x2c, 0x97, 0x13, 0x61, 0x84, 0x46, 0x1d, 0x14, 0xa6,
	0x68, 0xb8, 0xb5, 0x60, 0x16, 0x66, 0xbc, 0xb8, 0x25, 0xae, 0x6b, 0xf2, 0x87, 0x3b, 0x6e, 0xd6,
	0xea, 0x06, 0x6a, 0x5e, 0x0b, 0x38, 0x89, 0xed, 0x39, 0x7c, 0x3b, 0x8a, 0xb9, 0x12, 0x79, 0x91,
	0x9d, 0x44, 0xf1, 0x4e, 0xa3, 0x74, 0x50, 0xbd, 0x23, 0xa8, 0xce, 0xb6, 0xff, 0x6b, 0xfb, 0xb8,
	0x7c, 0xbf, 0xe7, 0xc2, 0x6c, 0xab, 0x84, 0xa4, 0x2a, 0xa7, 0x4c, 0x7f, 0x31, 0x99, 0x6e, 0x99,
	0x90, 0xb4, 0xdc, 0xec, 0xe6, 0x5c, 0xcd, 0xdd, 0x73, 0x70, 0xcf, 0xa6, 0xa4, 0x8e, 0x3b, 0x19,
	0x5a, 0xb9, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x50, 0x7c, 0x76, 0x6f, 0x02, 0x00, 0x00,
}
